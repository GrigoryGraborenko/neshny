////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(std430, binding = 0) buffer ControlBuffer { int i[]; } b_Control;
layout(std430, binding = 1) readonly buffer DeathBuffer { int i[]; } b_Death;
layout(std430, binding = 2) buffer EntityBuffer { float f[]; } b_Entity;

#include "Utils.glsl"

uniform int     uCount;
uniform int     uOffset;

uniform int     uLifeCount;

////////////////////////////////////////////////////////////////////////////////
void main() {
    uvec3 global_id = gl_GlobalInvocationID;

    int comp_index = int(global_id.x) + (int(global_id.y) + int(global_id.z) * 32) * 32 + uOffset;
    if (comp_index >= uCount) {
        return;
    }
    int dead_index = b_Death.i[comp_index];

    //////////////////////////////////
    int remain_goal = uLifeCount - uCount;
    if(dead_index >= remain_goal) {
        return;
    }
    
    while(true) {
        int end_counter = atomicAdd(b_Control.i[0], 1);
        int alive_index = uLifeCount - end_counter - 1;

        float value = b_Entity.f[alive_index * FLOATS_PER];
        if(value >= 0) {

            for(int i = 0; i < FLOATS_PER; i++) {
                value = b_Entity.f[alive_index * FLOATS_PER + i];
                b_Entity.f[dead_index * FLOATS_PER + i] = value;
            }

            break;
        }
    }
}