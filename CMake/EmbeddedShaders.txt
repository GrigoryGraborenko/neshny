include(${BASE_DIR}/UserSettings.cmake)

message(STATUS "Embedding shaders")

# creates CPP resources file "EmbeddedFiles.cpp" from input files
function(create_resources output_fname)
    # create empty output file
    file(WRITE ${output_fname} "")

    set(resource_vector "struct EmbeddedFile{ unsigned long long p_Size=0\\; const unsigned char* p_Data=nullptr\\; }\\;\n std::unordered_map<std::string, EmbeddedFile> g_EmbeddedFiles = {\n")

    # iterate through input files
    math(EXPR last "${ARGC} - 1")
    foreach(i RANGE 1 ${last})
        # get short filename
        string(REGEX MATCH "([^/]+)$" filename ${ARGV${i}})
        # replace filename spaces & extension separator for C compatibility
        string(REGEX REPLACE "\\.| |-" "_" c_filename ${filename})
        # read hex data from file
        file(READ ${ARGV${i}} filedata HEX)

        if(NOT filedata)
			continue()
        endif()

        # convert hex data for C compatibility
        string(REGEX REPLACE "([0-9a-f][0-9a-f])" "0x\\1," filedata ${filedata})
        # append data to output file
        file(APPEND ${output_fname} "const unsigned char _g_${c_filename}[] = {${filedata}};\n")
        string(APPEND resource_vector "{ \"${filename}\", { sizeof(_g_${c_filename}), _g_${c_filename} }},\n")
    endforeach()
    string(APPEND resource_vector "}\\;\n")
    file(APPEND ${output_fname} ${resource_vector})
endfunction()

# get the list of shaders from the app
file(GLOB_RECURSE ShaderList "${BASE_DIR}/${SHADER_PATH}/*.*")
file(GLOB_RECURSE NeshnyShaderList ${NESHNY_DIR}/shaders/*.*)

create_resources("${BASE_DIR}/src/EmbeddedFiles.cpp" ${NeshnyShaderList} ${ShaderList})