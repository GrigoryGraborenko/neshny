////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
Engine::Engine(void) {
}

////////////////////////////////////////////////////////////////////////////////
Engine::~Engine(void) {
}

////////////////////////////////////////////////////////////////////////////////
void Engine::MouseButton(int button, bool is_down) {
}

////////////////////////////////////////////////////////////////////////////////
void Engine::MouseMove(QVector2D delta, bool occluded) {
}

////////////////////////////////////////////////////////////////////////////////
void Engine::MouseWheel(bool up) {
}

////////////////////////////////////////////////////////////////////////////////
void Engine::Key(int key, bool is_down) {
	if (key == Qt::Key_Escape) {
		m_ShouldExit = true;
	}
}

////////////////////////////////////////////////////////////////////////////////
void Engine::Init(void) {
}

////////////////////////////////////////////////////////////////////////////////
void Engine::ExitSignal(void) {
	m_ShouldExit = true;
}

////////////////////////////////////////////////////////////////////////////////
bool Engine::ShouldExit(void) {
	return m_ShouldExit;
}

////////////////////////////////////////////////////////////////////////////////
bool Engine::Tick(qint64 delta_nanoseconds, int tick) {
	return true;
}

////////////////////////////////////////////////////////////////////////////////
void Engine::Render(int width, int height) {

	// dynamically load the shader that corresponds to Fullscreen.vert and Fullscreen.frag
	GLShader* prog = Neshny::GetShader("Fullscreen");
	prog->UseProgram();
	//glUniform1i(prog->GetUniform("uniform_name"), 123);

	GLBuffer* buff = Neshny::GetBuffer("Square"); // get a built-in model
	buff->UseBuffer(prog); // attach the program to the buffer
	buff->Draw(); // executes the draw call

	//DebugRender::Point(Triple(100.0, 30.0, 30.0), QVector4D(0.0, 0.5, 0.5, 1.0));
	//DebugRender::Render3DDebug(vp, width, height, Triple(0, 0, 0), 1.0);

	DebugRender::Clear();
	Neshny::RenderEditor();
}