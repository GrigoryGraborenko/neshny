////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "Utils.glsl"

uniform int		uMode;
uniform float	uValue;

////////////////////////////////////////////////////////////////////////////////
bool ThingMain(int item_index, Thing thing, inout Thing new_thing) {

    int int_value = int(floor(uValue));
    if(uMode == 0) {
        new_thing.Float += uValue;
        new_thing.TwoDim += vec2(uValue);
        new_thing.ThreeDim += vec3(uValue);
        new_thing.FourDim += vec4(uValue);
        new_thing.IntTwoDim += ivec2(int_value);
        new_thing.IntThreeDim += ivec3(int_value);
        new_thing.IntFourDim += ivec4(int_value);

#ifdef CREATE_OTHER
        if ((new_thing.Int % 2) == 0) {
            Other other;
            other.ParentIndex = item_index;
            other.Float = thing.Float;
            other.FourDim.xy = thing.TwoDim;
            other.FourDim.zw = thing.FourDim.zw;
            CreateOther(other);
        }
        new_thing.IntTwoDim.x += b_TestBuffer.i[item_index];
#endif

    } else if(uMode == 1) {

        DataItem data = GetDataItem(new_thing.Int % int_value);
        new_thing.Float += data.Float;
        new_thing.TwoDim += data.TwoDim;
        new_thing.ThreeDim += data.ThreeDim;
        new_thing.FourDim += data.FourDim;
        new_thing.IntTwoDim += data.IntTwoDim;
        new_thing.IntThreeDim += data.IntThreeDim;
        new_thing.IntFourDim += data.IntFourDim;

    } else if(uMode == 2) {
        if((new_thing.Int % int_value == 0)) {
            return true;
        }
    }
    return false;
}

////////////////////////////////////////////////////////////////////////////////
bool OtherMain(int item_index, Other other, inout Other new_other) {

    Thing parent = GetThing(other.ParentIndex);
    if ((parent.Id >= 0) && ((parent.Int % 3) == 1)) {
        return true;
    }
    return false;
}